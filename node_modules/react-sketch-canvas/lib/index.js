'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _immutable = require('immutable');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Canvas = require('./Canvas');

var _Canvas2 = _interopRequireDefault(_Canvas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SvgSketchCanvas = function (_React$Component) {
  _inherits(SvgSketchCanvas, _React$Component);

  function SvgSketchCanvas(props) {
    _classCallCheck(this, SvgSketchCanvas);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      drawMode: true,
      isDrawing: false,
      reset: false,
      resetStore: new _immutable.List(),
      redoStore: new _immutable.List(),
      currentPaths: new _immutable.List()
    };

    _this.handlePointerDown = _this.handlePointerDown.bind(_this);
    _this.handlePointerMove = _this.handlePointerMove.bind(_this);
    _this.handlePointerUp = _this.handlePointerUp.bind(_this);

    _this.exportImage = _this.exportImage.bind(_this);
    _this.exportSvg = _this.exportSvg.bind(_this);
    _this.exportPaths = _this.exportPaths.bind(_this);
    _this.loadPaths = _this.loadPaths.bind(_this);

    _this.eraseMode = _this.eraseMode.bind(_this);
    _this.clearCanvas = _this.clearCanvas.bind(_this);
    _this.undo = _this.undo.bind(_this);
    _this.redo = _this.redo.bind(_this);

    _this.svgCanvas = _react2.default.createRef();
    return _this;
  }

  /* Mouse Handlers - Mouse down, move and up */

  SvgSketchCanvas.prototype.handlePointerDown = function handlePointerDown(point) {
    var _props = this.props,
        strokeColor = _props.strokeColor,
        strokeWidth = _props.strokeWidth,
        canvasColor = _props.canvasColor,
        eraserWidth = _props.eraserWidth;


    this.setState(function (state) {
      return {
        isDrawing: true,
        redoStore: new _immutable.List(),
        currentPaths: state.currentPaths.push(new _immutable.Map({
          drawMode: state.drawMode,
          strokeColor: state.drawMode ? strokeColor : canvasColor,
          strokeWidth: state.drawMode ? strokeWidth : eraserWidth,
          paths: new _immutable.List([point])
        }))
      };
    });
  };

  SvgSketchCanvas.prototype.handlePointerMove = function handlePointerMove(point) {
    var isDrawing = this.state.isDrawing;


    if (!isDrawing) return;

    this.setState(function (state) {
      return {
        currentPaths: state.currentPaths.updateIn([state.currentPaths.size - 1], function (pathMap) {
          return pathMap.updateIn(['paths'], function (list) {
            return list.push(point);
          });
        })
      };
    });
  };

  SvgSketchCanvas.prototype.handlePointerUp = function handlePointerUp() {
    this.setState({
      isDrawing: false
    });
  };

  /* Mouse Handlers ends */

  /* Canvas operations */

  SvgSketchCanvas.prototype.eraseMode = function eraseMode(erase) {
    this.setState({
      drawMode: !erase
    });
  };

  SvgSketchCanvas.prototype.clearCanvas = function clearCanvas() {
    this.setState(function (state) {
      return {
        reset: true,
        resetStore: state.currentPaths,
        currentPaths: new _immutable.List()
      };
    });
  };

  SvgSketchCanvas.prototype.undo = function undo() {
    var _state = this.state,
        currentPaths = _state.currentPaths,
        reset = _state.reset;


    if (currentPaths.isEmpty() && !reset) return;

    this.setState(function (state) {
      if (state.reset) {
        return {
          reset: false,
          resetStore: new _immutable.List(),
          redoStore: state.currentPaths,
          currentPaths: state.resetStore
        };
      }
      return {
        redoStore: state.redoStore.push(state.currentPaths.get(-1)),
        currentPaths: state.currentPaths.pop()
      };
    });
  };

  SvgSketchCanvas.prototype.redo = function redo() {
    var redoStore = this.state.redoStore;


    if (redoStore.isEmpty()) return;

    this.setState(function (state) {
      return {
        redoStore: state.redoStore.pop(),
        currentPaths: state.currentPaths.push(state.redoStore.get(-1))
      };
    });
  };

  /* Exporting options */

  // Creates a image from SVG and renders it on canvas, then exports the canvas as image


  SvgSketchCanvas.prototype.exportImage = function exportImage(imageType) {
    var _this2 = this;

    return new Promise(function (resolve, reject) {
      _this2.svgCanvas.current.exportImage(imageType).then(function (data) {
        resolve(data);
      }).catch(function (e) {
        reject(e);
      });
    });
  };

  SvgSketchCanvas.prototype.exportSvg = function exportSvg() {
    var _this3 = this;

    return new Promise(function (resolve, reject) {
      _this3.svgCanvas.current.exportSvg().then(function (data) {
        resolve(data);
      }).catch(function (e) {
        reject(e);
      });
    });
  };

  SvgSketchCanvas.prototype.exportPaths = function exportPaths() {
    var currentPaths = this.state.currentPaths;


    return new Promise(function (resolve, reject) {
      try {
        resolve(currentPaths);
      } catch (e) {
        reject(e);
      }
    });
  };

  SvgSketchCanvas.prototype.loadPaths = function loadPaths(paths) {
    this.setState(function (prevState) {
      return {
        currentPaths: (0, _immutable.mergeDeep)(prevState.currentPaths, paths)
      };
    });
  };

  /* Finally!!! Render method */

  SvgSketchCanvas.prototype.render = function render() {
    var _props2 = this.props,
        width = _props2.width,
        height = _props2.height,
        canvasColor = _props2.canvasColor,
        background = _props2.background,
        style = _props2.style,
        allowOnlyPointerType = _props2.allowOnlyPointerType;
    var _state2 = this.state,
        currentPaths = _state2.currentPaths,
        isDrawing = _state2.isDrawing;


    return _react2.default.createElement(_Canvas2.default, {
      ref: this.svgCanvas,
      width: width,
      height: height,
      canvasColor: canvasColor,
      background: background,
      allowOnlyPointerType: allowOnlyPointerType,
      style: style,
      paths: currentPaths,
      isDrawing: isDrawing,
      onPointerDown: this.handlePointerDown,
      onPointerMove: this.handlePointerMove,
      onPointerUp: this.handlePointerUp
    });
  };

  return SvgSketchCanvas;
}(_react2.default.Component);

/* Default settings */

SvgSketchCanvas.defaultProps = {
  width: '100%',
  height: '100%',
  canvasColor: 'white',
  strokeColor: 'red',
  background: '',
  strokeWidth: 4,
  eraserWidth: 8,
  allowOnlyPointerType: 'pen',
  style: {
    border: '0.0625rem solid #9c9c9c',
    borderRadius: '0.25rem'
  }
};

/* Props validation */

SvgSketchCanvas.propTypes = process.env.NODE_ENV !== "production" ? {
  width: _propTypes2.default.string,
  height: _propTypes2.default.string,
  strokeColor: _propTypes2.default.string,
  canvasColor: _propTypes2.default.string,
  background: _propTypes2.default.string,
  strokeWidth: _propTypes2.default.number,
  eraserWidth: _propTypes2.default.number,
  allowOnlyPointerType: _propTypes2.default.string,
  style: _propTypes2.default.objectOf(_propTypes2.default.string)
} : {};

exports.default = SvgSketchCanvas;
module.exports = exports['default'];