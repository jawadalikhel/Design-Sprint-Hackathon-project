import React from 'react';
import PropTypes from 'prop-types';
import { List } from 'immutable';

var svgPath = function svgPath(paths, id, strokeWidth, strokeColor, command) {
  var d = paths.reduce(function (acc, path, i, a) {
    return i === 0 ? 'M ' + path.get('x') + ',' + path.get('y') : acc + ' ' + command(path, i, a);
  }, '');
  return React.createElement('path', {
    key: id,
    d: d,
    fill: 'none',
    strokeLinecap: 'round',
    stroke: strokeColor,
    strokeWidth: strokeWidth
  });
};

var line = function line(pointA, pointB) {
  var lengthX = pointB.get('x') - pointA.get('x');
  var lengthY = pointB.get('y') - pointA.get('y');

  return {
    length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),
    angle: Math.atan2(lengthY, lengthX)
  };
};

var controlPoint = function controlPoint(current, previous, next, reverse) {
  var p = previous || current;
  var n = next || current;

  var smoothing = 0.2;

  var o = line(p, n);

  var angle = o.angle + (reverse ? Math.PI : 0);
  var length = o.length * smoothing;

  var x = current.get('x') + Math.cos(angle) * length;
  var y = current.get('y') + Math.sin(angle) * length;

  return [x, y];
};

var bezierCommand = function bezierCommand(point, i, a) {
  var cpsX = null;
  var cpsY = null;

  switch (i) {
    case 0:
      var _controlPoint = controlPoint(undefined, undefined, point);

      cpsX = _controlPoint[0];
      cpsY = _controlPoint[1];

      break;
    case 1:
      var _controlPoint2 = controlPoint(a.get(i - 1), undefined, point);

      cpsX = _controlPoint2[0];
      cpsY = _controlPoint2[1];

      break;
    default:
      var _controlPoint3 = controlPoint(a.get(i - 1), a.get(i - 2), point);

      cpsX = _controlPoint3[0];
      cpsY = _controlPoint3[1];

      break;
  }

  var _controlPoint4 = controlPoint(point, a.get(i - 1), a.get(i + 1), true),
      cpeX = _controlPoint4[0],
      cpeY = _controlPoint4[1];

  return 'C ' + cpsX + ',' + cpsY + ' ' + cpeX + ',' + cpeY + ' ' + point.get('x') + ',' + point.get('y');
};

var Paths = function Paths(_ref) {
  var paths = _ref.paths;
  return React.createElement(
    React.Fragment,
    null,
    paths.map(function (path, id) {
      return svgPath(path.get('paths'), id, path.get('strokeWidth'), path.get('strokeColor'), bezierCommand);
    })
  );
};

Paths.propTypes = process.env.NODE_ENV !== "production" ? {
  paths: PropTypes.instanceOf(List).isRequired
} : {};

export default Paths;