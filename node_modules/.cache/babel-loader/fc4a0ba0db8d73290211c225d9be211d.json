{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\n\nvar svgPath = function svgPath(paths, id, strokeWidth, strokeColor, command) {\n  var d = paths.reduce(function (acc, path, i, a) {\n    return i === 0 ? 'M ' + path.get('x') + ',' + path.get('y') : acc + ' ' + command(path, i, a);\n  }, '');\n  return React.createElement('path', {\n    key: id,\n    d: d,\n    fill: 'none',\n    strokeLinecap: 'round',\n    stroke: strokeColor,\n    strokeWidth: strokeWidth\n  });\n};\n\nvar line = function line(pointA, pointB) {\n  var lengthX = pointB.get('x') - pointA.get('x');\n  var lengthY = pointB.get('y') - pointA.get('y');\n  return {\n    length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n    angle: Math.atan2(lengthY, lengthX)\n  };\n};\n\nvar controlPoint = function controlPoint(current, previous, next, reverse) {\n  var p = previous || current;\n  var n = next || current;\n  var smoothing = 0.2;\n  var o = line(p, n);\n  var angle = o.angle + (reverse ? Math.PI : 0);\n  var length = o.length * smoothing;\n  var x = current.get('x') + Math.cos(angle) * length;\n  var y = current.get('y') + Math.sin(angle) * length;\n  return [x, y];\n};\n\nvar bezierCommand = function bezierCommand(point, i, a) {\n  var cpsX = null;\n  var cpsY = null;\n\n  switch (i) {\n    case 0:\n      var _controlPoint = controlPoint(undefined, undefined, point);\n\n      cpsX = _controlPoint[0];\n      cpsY = _controlPoint[1];\n      break;\n\n    case 1:\n      var _controlPoint2 = controlPoint(a.get(i - 1), undefined, point);\n\n      cpsX = _controlPoint2[0];\n      cpsY = _controlPoint2[1];\n      break;\n\n    default:\n      var _controlPoint3 = controlPoint(a.get(i - 1), a.get(i - 2), point);\n\n      cpsX = _controlPoint3[0];\n      cpsY = _controlPoint3[1];\n      break;\n  }\n\n  var _controlPoint4 = controlPoint(point, a.get(i - 1), a.get(i + 1), true),\n      cpeX = _controlPoint4[0],\n      cpeY = _controlPoint4[1];\n\n  return 'C ' + cpsX + ',' + cpsY + ' ' + cpeX + ',' + cpeY + ' ' + point.get('x') + ',' + point.get('y');\n};\n\nvar Paths = function Paths(_ref) {\n  var paths = _ref.paths;\n  return React.createElement(React.Fragment, null, paths.map(function (path, id) {\n    return svgPath(path.get('paths'), id, path.get('strokeWidth'), path.get('strokeColor'), bezierCommand);\n  }));\n};\n\nPaths.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  paths: PropTypes.instanceOf(List).isRequired\n} : {};\nexport default Paths;","map":null,"metadata":{},"sourceType":"module"}