{"ast":null,"code":"import _classCallCheck from \"/Users/jawadalikhel/designSprint/design-sprint/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jawadalikhel/designSprint/design-sprint/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jawadalikhel/designSprint/design-sprint/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jawadalikhel/designSprint/design-sprint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jawadalikhel/designSprint/design-sprint/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jawadalikhel/designSprint/design-sprint/src/Main/Draw/index.js\";\nimport React, { Component } from 'react';\nimport './style.css';\n\nvar Draw =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Draw, _Component);\n\n  function Draw() {\n    var _this;\n\n    _classCallCheck(this, Draw);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Draw).call(this));\n    _this.state = {\n      isDrawing: false,\n      lines: Immutable.List()\n    };\n    return _this;\n  }\n\n  _createClass(Draw, [{\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(mouseEvent) {\n      if (mouseEvent.button != 0) {\n        return;\n      }\n\n      var point = this.relativeCoordinatesForEvent(mouseEvent);\n      this.setState(function (prevState) {\n        return {\n          lines: prevState.lines.push(Immutable.List([point])),\n          isDrawing: true\n        };\n      });\n    }\n  }, {\n    key: \"relativeCoordinatesForEvent\",\n    value: function relativeCoordinatesForEvent(mouseEvent) {\n      var boundingRect = this.refs.drawArea.getBoundingClientRect();\n      return new Immutable.Map({\n        x: mouseEvent.clientX - boundingRect.left,\n        y: mouseEvent.clientY - boundingRect.top\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(mouseEvent) {\n      if (!this.state.isDrawing) {\n        return;\n      }\n\n      var point = this.relativeCoordinatesForEvent(mouseEvent);\n      this.setState(function (prevState) {\n        return {\n          lines: prevState.lines.updateIn([prevState.lines.size - 1], function (line) {\n            return line.push(point);\n          })\n        };\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {\n      this.setState({\n        isDrawing: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Draw\"), React.createElement(\"div\", {\n        ref: \"drawArea\",\n        onMouseDown: this.handleMouseDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Draw;\n}(Component);\n\nexport default Draw;","map":{"version":3,"sources":["/Users/jawadalikhel/designSprint/design-sprint/src/Main/Draw/index.js"],"names":["React","Component","Draw","state","isDrawing","lines","Immutable","List","mouseEvent","button","point","relativeCoordinatesForEvent","setState","prevState","push","boundingRect","refs","drawArea","getBoundingClientRect","Map","x","clientX","left","y","clientY","top","updateIn","size","line","document","addEventListener","handleMouseUp","removeEventListener","handleMouseDown"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,aAAP;;IAEMC,I;;;;;AACJ,kBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,KAAK,EAAEC,SAAS,CAACC,IAAV;AAFI,KAAb;AAFY;AAMb;;;;oCAEeC,U,EAAY;AAC5B,UAAIA,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;AAC1B;AACD;;AAED,UAAMC,KAAK,GAAG,KAAKC,2BAAL,CAAiCH,UAAjC,CAAd;AAEA,WAAKI,QAAL,CAAc,UAAAC,SAAS,EAAI;AACzB,eAAO;AACLR,UAAAA,KAAK,EAAEQ,SAAS,CAACR,KAAV,CAAgBS,IAAhB,CAAqBR,SAAS,CAACC,IAAV,CAAe,CAACG,KAAD,CAAf,CAArB,CADF;AAELN,UAAAA,SAAS,EAAE;AAFN,SAAP;AAIC,OALH;AAMC;;;gDAE2BI,U,EAAY;AACtC,UAAMO,YAAY,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,qBAAnB,EAArB;AACA,aAAO,IAAIZ,SAAS,CAACa,GAAd,CAAkB;AACvBC,QAAAA,CAAC,EAAEZ,UAAU,CAACa,OAAX,GAAqBN,YAAY,CAACO,IADd;AAEvBC,QAAAA,CAAC,EAAEf,UAAU,CAACgB,OAAX,GAAqBT,YAAY,CAACU;AAFd,OAAlB,CAAP;AAID;;;oCAEejB,U,EAAY;AAC5B,UAAI,CAAC,KAAKL,KAAL,CAAWC,SAAhB,EAA2B;AACzB;AACD;;AAED,UAAMM,KAAK,GAAG,KAAKC,2BAAL,CAAiCH,UAAjC,CAAd;AAEA,WAAKI,QAAL,CAAc,UAAAC,SAAS,EAAI;AACzB,eAAO;AACLR,UAAAA,KAAK,EAAEQ,SAAS,CAACR,KAAV,CAAgBqB,QAAhB,CAAyB,CAACb,SAAS,CAACR,KAAV,CAAgBsB,IAAhB,GAAuB,CAAxB,CAAzB,EAAqD,UAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACd,IAAL,CAAUJ,KAAV,CAAJ;AAAA,WAAzD;AADF,SAAP;AAGC,OAJH;AAKC;;;wCAEmB;AAClBmB,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKC,aAA1C;AACD;;;2CACsB;AACrBF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,SAA7B,EAAwC,KAAKD,aAA7C;AACD;;;oCACe;AACd,WAAKnB,QAAL,CAAc;AAAER,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD;;;6BAEO;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,QAAA,GAAG,EAAC,UAAT;AAAoB,QAAA,WAAW,EAAE,KAAK6B,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;;;;EA/DgBhC,S;;AAiEnB,eAAeC,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport './style.css';\n\nclass Draw extends Component{\n  constructor() {\n    super();\n    this.state = {\n      isDrawing: false,\n      lines: Immutable.List(),\n    };\n  }\n\n  handleMouseDown(mouseEvent) {\n  if (mouseEvent.button != 0) {\n    return;\n  }\n\n  const point = this.relativeCoordinatesForEvent(mouseEvent);\n\n  this.setState(prevState => {\n    return {\n      lines: prevState.lines.push(Immutable.List([point])),\n      isDrawing: true,\n      };\n    });\n  }\n\n  relativeCoordinatesForEvent(mouseEvent) {\n    const boundingRect = this.refs.drawArea.getBoundingClientRect();\n    return new Immutable.Map({\n      x: mouseEvent.clientX - boundingRect.left,\n      y: mouseEvent.clientY - boundingRect.top,\n    });\n  }\n\n  handleMouseMove(mouseEvent) {\n  if (!this.state.isDrawing) {\n    return;\n  }\n\n  const point = this.relativeCoordinatesForEvent(mouseEvent);\n\n  this.setState(prevState => {\n    return {\n      lines: prevState.lines.updateIn([prevState.lines.size - 1], line => line.push(point)),\n      };\n    });\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mouseup\", this.handleMouseUp);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n  }\n  handleMouseUp() {\n    this.setState({ isDrawing: false });\n  }\n\n  render(){\n    return(\n      <div>\n        <h1>Draw</h1>\n        <div ref=\"drawArea\" onMouseDown={this.handleMouseDown} />\n      </div>\n    )\n  }\n}\nexport default Draw;\n"]},"metadata":{},"sourceType":"module"}